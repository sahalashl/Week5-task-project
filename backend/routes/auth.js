const express=require('express');const router=express.Router();const User=require('../models/User');const jwt=require('jsonwebtoken');router.post('/register',async(req,res)=>{try{const {name,email,password,role}=req.body;const exist=await User.findOne({email});if(exist)return res.status(400).json({msg:'Email exists'});const user=new User({name,email,password,role});await user.save();const token=jwt.sign({id:user._id},process.env.JWT_SECRET||'change_this_secret',{expiresIn:'7d'});res.json({token,user:{id:user._id,name:user.name,email:user.email,role:user.role}});}catch(e){res.status(500).json({msg:'Server error',error:e.message});}});router.post('/login',async(req,res)=>{try{const {email,password}=req.body;const user=await User.findOne({email});if(!user)return res.status(400).json({msg:'Invalid credentials'});const ok=await user.comparePassword(password);if(!ok)return res.status(400).json({msg:'Invalid credentials'});const token=jwt.sign({id:user._id},process.env.JWT_SECRET||'change_this_secret',{expiresIn:'7d'});res.json({token,user:{id:user._id,name:user.name,email:user.email,role:user.role}});}catch(e){res.status(500).json({msg:'Server error'});}});module.exports=router;